.. _authorization:

Authorization
==============
Roboswag can handle authorization for you.
For now it supports only ``HTTP Basic Auth`` and custom authorization but more will be added in the future.

Selecting authorization type for endpoint
------------------------------------------
The type of the authorization to use is automatically detected from the openAPI documentation and it's passed in
endpoint main class ``__init__`` method:

.. code:: python

    from roboswag import APIModel
    from roboswag.auth import BasicAuth


    class Users(APIModel):
        def __init__(self, url):
            super().__init__(base_url=url, authentication=BasicAuth)

If your documentation does not have authorization included or it's not discovered properly you can
modify endpoint class manually or use ``-a / --authorization`` option to overwrite it::

    roboswag generate -s spec.json --authorization BasicAuth

Use ``disable`` to disable authorization::

    roboswag generate -s spec.json -a disable

Supported authentication types
--------------------------------

BasicAuth
~~~~~~~~~~
The simples type of the authentication which encodes username and password into base64 string.

You can pass ``user`` and ``password`` to request method directly.
Autogenerated code includes ``**kwargs`` which will consume those variables.

Python library endpoint method:

.. code:: python

    def users_me(self, exp_status=200, validate_schema=True, **kwargs):
        response = self.get("/users/me", status=exp_status, **kwargs)

Robot Framework code:

.. code:: robotframework

    *** Test Cases ***
    Test
        Users Me    user=testuser    password=1234pass

If you don't provide ``user`` or ``password`` variables Roboswag will try to read them
from the current scope:

.. code:: robotframework

    *** Variables ***
    ${USER}    testuser

    *** Test Cases ***
    Test
        Set Test Variable    ${password}    abc
        Users Me  # ${USER} and ${password} variables will be automatically used

Custom authorization
----------------------
You can define your own authorization class and pass it to ``APIModel`` to be used for your
requests. Since Roboswag is using ``requests`` under the hood it uses the same principles described
in the `requests documentation <https://requests.readthedocs.io/en/latest/user/authentication/#new-forms-of-authentication>`_.

For the sake of the example let's assume you want to have ``HTTP Basic Auth`` type of the authorization.
You want to run your API tests on three different environments (dev, test, preprod) which require
different level of security. Depending on the environment type we need to:

- not use authorization for ``dev`` environment,
- use fixed user and password for ``test`` environment
- use user and password from kwargs/scoped variable for ``preprod`` environment

We can assume that environment name is stored under ``${ENV}`` Robot Framework variable.

Let's see how Roboswag internal ``BasicAuth`` is implemented:

.. code:: python

    class BasicAuth(HTTPBasicAuth):
        def __init__(self, **kwargs):
            user = get_from_kwargs_or_robot(kwargs, "user")
            password = get_from_kwargs_or_robot(kwargs, "password")
            super().__init__(user, password)

``get_from_kwargs_or_robot`` is a convenient method for retrieving variable value
from ``kwargs`` or the Robot Framework scope:

.. code:: python

    def get_from_kwargs_or_robot(kwargs, name, missing_ok=True):
        value = kwargs.get(name)
        if value is None:
            value = BuiltIn().get_variable_value(f"${{{name}}}")
        if not missing_ok and value is None:
            raise MissingParameter(name) from None
        return value

We can reuse the above code to create following custom authorization:

.. code:: python

    class AuthDependsOnEnv(HTTPBasicAuth):
        def __init__(self, **kwargs):
            env_name = BuiltIn().get_variable_value(f"${{{ENV}}}")
            if env_name == "dev":
                user, password = None, None
            elif env_name == "test":
                user, password = "constant", "values"
            else:
                user = get_from_kwargs_or_robot(kwargs, "user")
                password = get_from_kwargs_or_robot(kwargs, "password")
            super().__init__(user, password)

Finally we need to pass authorization class to APIModel parent class:

.. code:: python

    class YourEndpoint(APIModel):
        def __init__(self, url):
            super().__init__(base_url=url, authentication=AuthDependsOnEnv)
