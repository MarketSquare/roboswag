import jsonschema
from jsonschema import validate
import json

from openapi import APIModel


class {{ class_name }}(APIModel):
{% if description %}    """**Description:** {{ description }}"""
{% endif %}
    def __init__(self, url):
        super().__init__(base_url=url)
{% for endpoint in endpoints %}
{{ endpoint.method_signature }}):
{% if (endpoint.summary or endpoint.description) %}        """{% if endpoint.summary %}
        **Summary:** {{ endpoint.summary }}{% endif %}{% if endpoint.description %}

        **Description:** {{ endpoint.description }}{% endif %}
        """{% endif %}
{%- if endpoint.headers %}
        headers = {
{%- for param in endpoint.headers %}
            "{{ param.name }}": {{ param.python_name }}{{ "," if not loop.last else "" }}
{%- endfor %}
        }
{% endif %}
{%- if endpoint.query %}
        query = {
{%- for param in endpoint.query %}
            "{{ param.name }}": {{ param.python_name }}{{ "," if not loop.last else "" }}
{%- endfor %}
        }
{% endif %}
{%- if endpoint.body %}
        body = {
{%- for param in endpoint.body %}
            "{{ param.name }}": {{ param.python_name }}{{ "," if not loop.last else "" }}
{%- endfor %}
        }
{% endif %}
        response = self.{{ endpoint.http_method }}({{ "f" if "{" in endpoint.url else "" }}"{{ endpoint.url }}"{% if endpoint.headers %}, headers=headers{% endif %}{% if endpoint.query %}, query=query{% endif %}{% if endpoint.body %}, body=body{% endif %}, status=exp_status)
        {%- if endpoint.responses[endpoint.exp_status] and endpoint.responses[endpoint.exp_status].schema %}
        if validate_schema:
            try:
                validate(instance=json.loads(response.text), schema={{ endpoint.responses[endpoint.exp_status].schema }})
            except jsonschema.exceptions.ValidationError as err:
                print(err)
                return err
        {%- endif %}
        return response
{% endfor %}
