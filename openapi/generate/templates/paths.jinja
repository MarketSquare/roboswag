import logging

import jsonschema
from jsonschema import validate
import json

from openapi import APIModel


class {{ class_name }}(APIModel):
{% if description %}    """**Description:** {{ description }}"""
{% endif %}
    def __init__(self, url):
        super().__init__(base_url=url)
{% for endpoint in endpoints %}
{{ endpoint.method_signature }}{% if endpoint.body %}, validate_payload=True{% endif %}):
{% if (endpoint.summary or endpoint.description) %}        """{% if endpoint.summary %}
        **Summary:** {{ endpoint.summary }}{% endif %}{% if endpoint.description %}

        **Description:** {{ endpoint.description }}{% endif %}
        """{% endif %}
{%- if endpoint.headers %}
        headers = {
{%- for param in endpoint.headers %}
            "{{ param.name }}": {{ param.python_name }}{{ "," if not loop.last else "" }}
{%- endfor %}
        }
{% endif %}
{%- if endpoint.query %}
        query = {
{%- for param in endpoint.query %}
            "{{ param.name }}": {{ param.python_name }}{{ "," if not loop.last else "" }}
{%- endfor %}
        }
{% endif %}
{%- if endpoint.body %}
        if validate_payload:
        {%- for param in endpoint.body %}
        {%- if param.schema %}
            try:
                schema = {{ param.schema }}
                validate(instance=json.loads(body), schema=schema)
            except jsonschema.exceptions.ValidationError as err:
                raise err
        {%- endif %}
        {%- endfor %}

        body = {
{%- for param in endpoint.body %}
            "{{ param.name }}": {{ param.python_name }}{{ "," if not loop.last else "" }}
{%- endfor %}
        }
{% endif %}
        response = self.{{ endpoint.http_method }}({{ "f" if "{" in endpoint.url else "" }}"{{ endpoint.url }}"{% if endpoint.headers %}, headers=headers{% endif %}{% if endpoint.query %}, query=query{% endif %}{% if endpoint.body %}, body=body{% endif %}, status=exp_status)

        if validate_schema:{% for status_code, resp in endpoint.responses.items() %}
        {%- if resp.schema %}
            {% if not loop.first %}el{% endif %}if response.status_code == {{ status_code }}:
                try:
                    schema = {{ resp.schema }}
                    validate(instance=json.loads(response.text), schema=schema)
                except jsonschema.exceptions.ValidationError as err:
                    raise err
        {%- elif status_code != "default" %}
            {% if not loop.first %}el{% endif %}if response.status_code == {{ status_code }}:
                expected_text = "{{ resp.description }}"
                logging.info(
                    f"Asserting response description:\n    '{response.text}'\n"
                    f"equals expected:\n    '{expected_text}'"
                )
                assert response.text == expected_text
        {%- else %}
            {% if not loop.first %}el{% endif %}if response.status_code == "default":
                expected_text = "{{ resp.description }}"
                logging.info(
                    f"Asserting response description:\n    '{response.text}'\n"
                    f"equals expected:\n    '{expected_text}'"
                )
                assert response.text == expected_text
        {%- endif %}{% endfor %}
            else:
                logging.error(f"Received status code ({response.status_code}) is not expected by the API specification")
                assert False

        return response
{% endfor %}
